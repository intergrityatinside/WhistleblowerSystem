@page "/confirmation"
@inject NavigationManager NavigationManager
@inject WhistleblowerService WhistleblowerService
@inject IFormService FormService
@implements IDisposable
@using System.Text.RegularExpressions
@using WhistleblowerSystem.Business.DTOs;
@using WhistleblowerSystem.Client.Services;


<div class="content-container">
    <div class="content">
        <h1>
            Abschluss
        </h1>
        <p>
            Vielen Dank für Ihre Meldung!
            <br />
        </p>
        <p>
            Ihre Case ID lautet: <span style="color:red;font-weight:bold;"> @_form?.Id</span>
            <br />
        </p>
        <div>
            Aus Sicherheitsgründen verschlüsseln Sie Ihre CaseID zusätzlich mit einem Passwort:
            <br />
            <MudForm @ref="form" @bind-IsValid="@success" @bind-Errors="@errors">
                <MudTextField T="string" Label="Passwort" HelperText="Wählen Sie ein starkes Passwort" @ref="pwField1"
                              InputType="InputType.Password"
                              Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                              RequiredError="Bitte geben Sie ein Passwort ein!"
                              @bind-Value="_whistleblower.Password" />
                <MudTextField T="string"
                              Label="Passwort" HelperText="Wiederholen Sie das Passwort" InputType="InputType.Password"
                              Validation="@(new Func<string, string>(PasswordMatch))" />
            </MudForm>
        </div>
        <div>
            <br />
            <p style="color:red;font-weight:bold;">
                Bemerkung: Mit der CaseID und Ihrem Passwort können Sie den Stand Ihrer Meldung
                jederzeit unter “Meldung anzeigen” aufrufen. Bitte notieren Sie sich die CaseID und das
                Passwort sofort, sobald Sie dieses Fenster schliessen, können CaseID und Passwort
                nicht mehr aufgerufen oder verändert werden.
            </p>
        </div>

    </div>
    <div class="footer">
        <div>
            <MudButton OnClick="Close" Color="Color.Dark" Variant="Variant.Filled">Passwort speichern und Schliessen</MudButton>
        </div>
    </div>
</div>

@code {
    bool success;
    string[] errors = { };
    MudTextField<string>? pwField1;
    MudForm? form;
    private FormDto? _form;
    private WhistleblowerDto _whistleblower = new WhistleblowerDto("", "", "");

    protected override void OnInitialized()
    {
        _form = FormService.GetCurrentForm();
        NavigationManager.LocationChanged += CheckResetForm;

    }

    private void CheckResetForm(object? sender, LocationChangedEventArgs e)
    {
        string relativePath = e.Location.Replace(NavigationManager.BaseUri, "");
        FormService.SetCurrentForm(null);
        _form = null;
        StateHasChanged();
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        //TODO check which checks should be done
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Bitte geben Sie ein Passwort ein!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Das Passwort muss mindestens 8 Zeichen lang sein"; //Password must be at least of length 8
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Das Passwort muss mindestens einen Grossbuchstaben enthalten"; //Password must contain at least one capital letter
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Das Passwort muss mindestens einen Kleinbuchstaben enthalten"; //Password must contain at least one lowercase letter
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Das Passwort muss mindestens eine Ziffer enthalten"; //Password must contain at least one digit
    }

    private string PasswordMatch(string arg)
    {
        if (pwField1?.Value != arg)
            return "Passwörter stimmen nicht überein";
        return "";
    }

    private async Task Close()
    {
        FormService.SetCurrentForm(null);
        _whistleblower.Id = _form?.Id;
        await WhistleblowerService.Save(_whistleblower);
        NavigationManager.NavigateTo("/home");
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= CheckResetForm;
    }

}

