@page "/reportdetailview"
@inject IStringLocalizer<App> L
@using WhistleblowerSystem.Shared.Enums
@using Microsoft.Extensions.Localization

<div class="content-container">
    <div class="content">
        <h1 style="display: inline;" class="page-title">Case: </h1>
        <h1 style="display: inline; padding-bottom: 1.5rem;">@_form!.Id</h1>
        @if (_isCompany)
        {
            <div class="row" style="padding-top: 10px; padding-bottom: 10px;">
                <MudIconButton OnClick="NavigateBack" Icon="@Icons.Material.Filled.ArrowBackIos" Style="font-size: 3rem;"/>
            </div>
        }
        <MudCard Elevation="5">
            <MudCardHeader>
                <CardHeaderContent>
                    <MudText Typo="Typo.h5">Meldung: @_form.Title</MudText>
                </CardHeaderContent>
                <CardHeaderActions>
                    @if (_form.Attachements!.Count != 0)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.AttachFile" Color="Color.Default"/>
                    }
                </CardHeaderActions>
            </MudCardHeader>
            <MudCardContent>
                <MudText Style="padding-bottom: 8px;" Typo="Typo.body2">@_form.Description</MudText>
                <MudDivider/>
            </MudCardContent>
            <MudCardActions Style="justify-content: flex-end; padding: 16px;">
                @if (_isCompany)
                {
                    <div class="state-container">
                        <MudSelect @bind-Value="_enumValue" Label="Status" OffsetY="true" Margin="Margin.None" Style="max-width: 200px;">
                            @foreach (ViolationState item in Enum.GetValues(typeof(ViolationState)))
                            {
                                <MudSelectItem Value="@item">@L[item.ToString()]</MudSelectItem>
                            }
                        </MudSelect>
                        <MudButton OnClick="async () => await SaveState()" Color="Color.Dark" Variant="Variant.Outlined" Size="Size.Small" Class="ma-2" Disabled="_enumValue == _form.State">Status Speichern</MudButton>
                    </div>
                }
                @if (!_isCompany)
                {
                    <MudText> Status: @_form.State.ToString()</MudText>
                }
            </MudCardActions>
        </MudCard>

        <h5 style="padding-top:15px;">Nachrichten</h5>
        <div class="messaging-container" style="max-width: 50%">
            @foreach (var formMessageDto in _form!.Messages!)
            {
                <MudCard Outlined="true">
                    <MudCardContent Style="@GetMessageStyle(formMessageDto)">
                        <MudText>Sachbearbeiter, @formMessageDto.Timestamp</MudText>
                        <MudText Typo="Typo.body2">@formMessageDto.Text</MudText>
                    </MudCardContent>
                </MudCard>
            }
            @if (_form.Messages.Count == 0)
            {
                <MudText>Noch keine Nachrichten vorhanden</MudText>
            }
            <EditForm Model="@_formMessageDto">
                <MudCard Outlined="true">
                    <MudCardContent>
                        <MudText>Ich, @DateTime.Now</MudText>
                        <MudTextField @bind-Value="_formMessageDto!.Text" Placeholder="Neue Nachricht eingeben"></MudTextField>
                    </MudCardContent>
                    <MudCardActions>
                        <MudButton OnClick="async () => await SendMessage()" Color="Color.Dark" Variant="Variant.Outlined" Size="Size.Small" Class="ma-2">senden</MudButton>
                    </MudCardActions>
                </MudCard>
            </EditForm>

        </div>

    </div>
    @if (!_isCompany)
    {
        <div class="footer">
            <MudButton OnClick="Close" Color="Color.Dark" Variant="Variant.Filled">Meldung schliessen</MudButton>
        </div>
    }
</div>