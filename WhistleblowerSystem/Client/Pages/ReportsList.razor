@page "/reportslist"
@using WhistleblowerSystem.Client.Services;
@using WhistleblowerSystem.Shared.DTOs;
@using Microsoft.AspNetCore.Components
@using WhistleblowerSystem.Shared.Models

<div class="content-container">
    <div class="content">
        <h1>Meldungen</h1>
        <MudTable Filter="new Func<FormModel, bool>(FilterFunc1)" FixedHeader="true" Hover="true" Items="@_allFormModels"  SortLabel="Sort By" T="FormModel" OnRowClick="@FormSelected">
            <ToolBarContent>
                <MudSpacer/>
                <MudTextField @bind-Value="_searchString" Placeholder="Case ID suchen" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>
                    <MudTableSortLabel T="FormModel" SortBy="f => f.Title">Thema der Meldung</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T="FormModel" SortBy="f => f.Id!">CaseID</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    <MudTableSortLabel T="FormModel" SortBy="f => f.StateString">Status</MudTableSortLabel>
                </MudTh>
                <MudTh>
                    @* ReSharper disable once HeapView.BoxingAllocation *@
                    <MudTableSortLabel T="FormModel" SortBy="f => f.Datetime">Datum</MudTableSortLabel>

                </MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="title">@context.Title</MudTd>
                <MudTd DataLabel="caseId">@context.Id</MudTd>
                <MudTd DataLabel="state">@context.StateString</MudTd>
                @* ReSharper disable once HeapView.BoxingAllocation *@
                <MudTd DataLabel="date">@context.Datetime</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager/>
            </PagerContent>
        </MudTable>
    </div>
</div>

@code {
    private string? _searchString = "";
    private List<FormDto> _allForms = new();
    private List<FormModel> _allFormModels = new();
    [Inject] 
    private NavigationManager NavigationManager { get; set; } = null!;
    [Inject]
    private IFormService FormService { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        var loadedForms = await FormService.LoadAll();
        if (loadedForms != null)
        {
            _allForms = loadedForms;
            foreach (FormDto form in _allForms)
            {
                var formModel = FormService.MapFormDtoToFormModel(form);
                _allFormModels.Add(formModel);
            }
        }
        else
        {
            Console.Write("no forms");
        }
    }
    private bool FilterFunc1(FormModel formModel) => FilterFunc(formModel, _searchString);

    private bool FilterFunc(FormModel formModel, string? searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
        {
            return true;
        }

        if (formModel.Id != null) {
            if (formModel.Id.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            {
                return true;
            }
        }

        return false;
    }

    private void FormSelected(TableRowClickEventArgs<FormModel> tableRowClickEventArgs)
    {
        FormService.SetCurrentFormModel(tableRowClickEventArgs.Item);
        //NavigationManager.NavigateTo("/reportdetailview");
    }

}