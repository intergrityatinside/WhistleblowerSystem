@page "/upload"
@inject ISnackbar Snackbar
@inject IFormService FormService
@inject IAttachementService AttachementService
@inject NavigationManager NavigationManager
@implements IDisposable
@using WhistleblowerSystem.Shared.DTOs;
@using WhistleblowerSystem.Client.Services;
@using Microsoft.Extensions.Localization;

<style>
    .drag-drop-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all .4s;
        min-height: 300px;
        border: dotted;
        margin-bottom: 10px;
        border-color: #FDE70E;
    }

    .drag-drop-input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        z-index: 2;
        width: inherit;
        height: 300px;
    }

    .drag-enter {
        box-shadow: var(--mud-elevation-10);
    }

    .list {
        padding: 2em;
        min-width: 100%;
    }
</style>

<div class="content-container">
    <div class="content">
        <h1 class="page-title">
            @L["upload_title"]
        </h1>
        <p>
            @L["upload_text_1"]
            <br />
        </p>
        <p>
            @L["upload_text_2"]
            <br />
        </p>
        <p>
            @L["upload_thanks"]
        </p>

        <MudPaper @ondragenter="@(()=>_dragEnterStyle="drag-enter")"
                  @ondragleave="@(()=>_dragEnterStyle=null)"
                  @ondragend="@(()=>_dragEnterStyle=null)"
                  Class=@("drag-drop-zone "+ _dragEnterStyle)>

            <InputFile OnChange="OnInputFileChanged" multiple class="drag-drop-input" />
            @if (_form == null || _form!.Attachements == null || _form!.Attachements!.Count() == 0)
            {
                <MudText Typo="Typo.h5">@L["upload_hint"]</MudText>
            }
            else
            {
                <MudList Style="padding:2em;width:100%;" Dense="true">
                    @foreach (var file in _form!.Attachements!)
                    {
                        <MudListItem @key="file.Filename">
                            <MudChip Color="Color.Dark"
                                        Style="width:60px; overflow:hidden;"
                                        Text="@(file.Filename.Split(".").Last())" />
                            @file.Filename
                            <MudIconButton OnClick="() => DeleteDocument(file.AttachementId, file.Filename)" Icon="@Icons.Material.Filled.Delete" Color="Color.Default" />

                        </MudListItem>
                    }
                </MudList>
            }
        </MudPaper>
    </div>
    <div class="footer">
        <div>
            <MudButton OnClick="Back" Color="Color.Dark" Variant="Variant.Filled">@L["upload_back"]</MudButton>
            <MudButton OnClick="async () => await UploadDocs()" Color="Color.Dark" Disabled=@IsTaskRunning Variant="Variant.Filled">@L["upload_continue"]</MudButton>

        </div>
    </div>
</div>

@code {
    [Inject] IStringLocalizer<App> L { get; set; } = null!;
    [Inject] private IDialogService? DialogService { get; set; }
    private string? _dragEnterStyle;
    private FormDto? _form;
    bool IsTaskRunning = false;
    bool rerender = false;

    protected override async Task OnInitializedAsync()
    {
        _form = FormService.GetCurrentForm() != null ? FormService.GetCurrentForm() : await FormService.GetForm();
        NavigationManager.LocationChanged += CheckResetForm;

    }

    protected override bool ShouldRender()
    {
        var render = base.ShouldRender() || rerender;
        rerender = false;
        return render;
    }


    private async Task OnInputFileChanged(InputFileChangeEventArgs e)
    {
        var addedFiles = e.GetMultipleFiles().ToList();
        bool fileExistsWithSameName = false;
        if (addedFiles != null)
        {
            foreach (var addedFile in addedFiles) {
                if (_form != null && _form.Attachements != null)
                {
                    foreach (var file in _form!.Attachements!)
                    {
                        if (file.Filename == addedFile.Name)
                        {
                            //TODO: Mehrsprachig
                            await DialogService!.ShowMessageBox(
                                "Warnung",
                                "Es wurde bereits ein File mit dem selben Namen hinzugefügt",
                                yesText: "Schliessen");
                            fileExistsWithSameName = true;
                            break;
                        }
                    }
                }

                if (fileExistsWithSameName)
                {
                    continue;
                }

                var attachementMetaData = await AttachementService.Save(addedFile);
                if (attachementMetaData != null)
                {
                    _form!.Attachements = _form!.Attachements ?? new List<AttachementMetaDataDto>();
                    _form!.Attachements.Add(attachementMetaData);
                }
                rerender = true;
            }
        }
    }

    private async Task UploadDocs()
    {
        IsTaskRunning = true;

        FormDto? savedForm = await FormService.Save(_form!);
        if (savedForm != null)
        {
            FormService.SetCurrentForm(savedForm);
            Console.WriteLine("Form saved");
            NavigationManager.NavigateTo("/confirmation");

        }

    }

    private async Task DeleteDocument(string id, string filename) {
        await AttachementService.Delete(id);
        _form!.Attachements!.Remove(_form!.Attachements.First(a => a.AttachementId == id));
    }

    private void CheckResetForm(object? sender, LocationChangedEventArgs e)
    {
        string relativePath = e.Location.Replace(NavigationManager.BaseUri, "");
        if (!relativePath.StartsWith("confirmation") && !relativePath.StartsWith("newreport"))
        {
            FormService.SetCurrentForm(null);
            _form = null;
            StateHasChanged();
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/newreport");

    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= CheckResetForm;
    }
}

