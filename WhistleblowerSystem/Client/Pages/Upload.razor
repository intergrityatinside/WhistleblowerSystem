@page "/upload"
@inject ISnackbar Snackbar
@inject IFormService FormService
@inject IAttachementService AttachementService
@inject NavigationManager NavigationManager
@implements IDisposable
@using WhistleblowerSystem.Business.DTOs;
@using WhistleblowerSystem.Client.Services;


<style>
    .drag-drop-zone {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: all .4s;
        min-height: 300px;
        border: dotted;
        margin-bottom: 10px;
        border-color: #FDE70E;
    }

    .drag-drop-input {
        position: absolute;
        opacity: 0;
        cursor: pointer;
        z-index: 2;
        width: inherit;
        height: 300px;
    }

    .drag-enter {
        box-shadow: var(--mud-elevation-10);
    }

    .list {
        padding: 2em;
        min-width: 100%;
    }
</style>

<div class="content-container">
    <div class="content">
        <h1>
            Dokumente hochladen
        </h1>
        <p>
            Beweise sind wichtig, um die Situation in Ihrem Bericht genau zu verstehen und analysieren. Wenn Sie relevante Dateien hochladen möchten, nutzen Sie bitte den unten stehenden Upload-Bereich.
            Dies wird uns helfen, Ihren Fall effektiver und effizienter zu bearbeiten.
            <br />
        </p>
        <p>
            Hinweis zum Versand von Anhängen: Dateien können versteckte personenbezogene Daten enthalten, die Ihre Anonymität
            gefährden. Bitte entfernen Sie diese Daten vor dem Versenden.
            <br />
        </p>
        <p>
            Besten Dank für Ihre Mitarbeit!
        </p>

        <MudPaper @ondragenter="@(()=>_dragEnterStyle="drag-enter")"
                  @ondragleave="@(()=>_dragEnterStyle=null)"
                  @ondragend="@(()=>_dragEnterStyle=null)"
                  Class=@("drag-drop-zone "+ _dragEnterStyle)>

            <InputFile OnChange="OnInputFileChanged" multiple class="drag-drop-input" />

            @if (fileNames.Count() == 0)
            {
                <MudText Typo="Typo.h5">Dokumente hierher ziehen oder klicken</MudText>
            }
            else
            {
                <MudList Style="padding:2em;width:100%;" Dense="true">
                    @foreach (var file in fileNames)
                    {
                        <MudListItem @key="@file">
                            <MudChip Color="Color.Dark"
                                     Style="width:60px; overflow:hidden;"
                                     Text="@(file.Split(".").Last())" />
                            @file
                        </MudListItem>}
                </MudList>
            }
        </MudPaper>
    </div>
    <div class="footer">
        <div>
            <MudButton OnClick="Back" Color="Color.Dark" Variant="Variant.Filled">Zurück</MudButton>
            <MudButton OnClick="UploadDocs" Color="Color.Dark" Variant="Variant.Filled">Einreichen</MudButton>

        </div>
    </div>
</div>

@code {
    private string? _dragEnterStyle;
    private IList<string> fileNames = new List<string>();
    private List<AttachementMetaDataDto>? _attachmentMetaData = new List<AttachementMetaDataDto>();
    private FormDto? _form;
    private IReadOnlyList<IBrowserFile>? files;

    protected override async Task OnInitializedAsync()
    {
        _form = FormService.GetCurrentForm() != null ? FormService.GetCurrentForm() : await FormService.GetForm();
        NavigationManager.LocationChanged += CheckResetForm;

    }


    private void OnInputFileChanged(InputFileChangeEventArgs e)
    {
        files = e.GetMultipleFiles();
        fileNames = files.Select(f => f.Name).ToList();
    }

    private async Task UploadDocs()
    {
        //if (files == null)
        //    return;

        //foreach (var file in files) {
        //    var attachementMetaData = await AttachementService.Save(file);
        //    if (attachementMetaData != null && _attachmentMetaData != null) {
        //        _attachmentMetaData.Add(attachementMetaData);
        //    }
        //}

        //_form!.Attachements = _attachmentMetaData;
        FormDto? savedForm = await FormService.Save(_form!);
        if (savedForm != null)
        {
            FormService.SetCurrentForm(savedForm);
            Console.WriteLine("Form saved");
            NavigationManager.NavigateTo("/confirmation");

        }

    }

    private void CheckResetForm(object? sender, LocationChangedEventArgs e)
    {
        string relativePath = e.Location.Replace(NavigationManager.BaseUri, "");
        if (!relativePath.StartsWith("confirmation") && !relativePath.StartsWith("newreport"))
        {
            FormService.SetCurrentForm(null);
            _form = null;
            StateHasChanged();
        }
    }

    private void Back()
    {
        NavigationManager.NavigateTo("/newreport");

    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= CheckResetForm;
    }
}

